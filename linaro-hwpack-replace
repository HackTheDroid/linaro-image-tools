#!/usr/bin/env python
# Copyright (C) 2010, 2011 Linaro
#
# Author: Deepti B. Kalakeri <deepti.kalakeri@linaro.org>
#
# This file is part of Linaro Image Tools. It adds the feature
# to include/replace a debian package into the given hwpack
#
# Linaro Image Tools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Linaro Image Tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Linaro Image Tools.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import sys
import shutil
import glob
import logging
import tarfile
import tempfile
import argparse
import datetime
import fileinput
from debian.deb822 import Packages
from linaro_image_tools.hwpack.packages import get_packages_file
from linaro_image_tools.hwpack.packages import FetchedPackage


parser = argparse.ArgumentParser()
parser.add_argument("-t", "--hwpack-name", dest="hwpack_name",
                    help="Specific hwpack-name to use (default: None)")
parser.add_argument("-p", "--deb-pack", dest="deb_pack",
                    help="Specific debian package to replace (default: None).")
parser.add_argument("-r", "--prefix-pkg-remove", dest="prefix_pkg_remove",
                    help="Specify the prefix of the old debian package to "\
                          "replace (default: None).")
parser.add_argument("-d", "--debug-output", action="store_true", dest="debug",
                    help="Verbose messages are displayed when specified")

logger = logging.getLogger("linaro-hwpack-replace")


class DummyStanza(object):

    def __init__(self, info):
        self.info = info

    def dump(self, fd):
        fd.write(get_packages_file([self.info]))


def set_logging_param(args):
    ch = logging.StreamHandler()
    ch.setLevel(logging.INFO)
    formatter = logging.Formatter("%(message)s")
    ch.setFormatter(formatter)
    logger.setLevel(logging.INFO)
    logger.addHandler(ch)
    if args.debug:
        ch.setLevel(logging.DEBUG)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
        ch.setFormatter(formatter)
        logger.setLevel(logging.DEBUG)


def get_hwpack_name(old_hwpack):
    timestamp = [datetime.datetime.now().strftime("%Y%m%d-%H%S")]
    hwpack_name_parts = (old_hwpack.split('_', 3))
    return('_'.join(hwpack_name_parts[:2] + timestamp + hwpack_name_parts[3:]))


def verify_existing_debians(debpack_dirname, new_debpack_info):
    """
       Find if the debian file with the same name exists,
       if it exists then remove it and replace with the new deb file
       If similar debian file exists then remove it
    """

    old_debpack_info = None
    deb_file_to_remove = None

    try:
        for deb_filename in os.listdir(debpack_dirname):
            root, ext = os.path.splitext(deb_filename)
            if root.startswith("%s" %new_debpack_info) and ext == '.deb':
                deb_file_to_remove =  os.path.join(debpack_dirname, deb_filename)
                old_debpack_info = FetchedPackage.from_deb(deb_file_to_remove)
                os.remove(deb_file_to_remove)
    except Exception, details:
        logger.error("Error Details: %s", details)

    return old_debpack_info


def modify_manifest_info(tempdir, new_debpack_info, prefix_pkg_remove):
    """ Modify the manifest file to include the new debian information """

    debpack_manifest_fname = os.path.join(tempdir, "manifest")
    new_debpack_line = '%s=%s\n' % (new_debpack_info.name, new_debpack_info.version)

    for line in fileinput.FileInput(debpack_manifest_fname, inplace=1):
        if not (line.startswith("%s" % prefix_pkg_remove) or 
                line.startswith("hwpack-linaro")):
            sys.stdout.write(line)

    logger.debug("Adding the new debian package info to manifest")
    fout = open(debpack_manifest_fname, "a")
    fout.write(new_debpack_line)
    fout.close()


def modify_Packages_info(debpack_dirname, new_debpack_info, prefix_pkg_remove):
    """ Modify the Packages file to include the new debian information """

    debpack_Packages_fname = os.path.join(debpack_dirname, "Packages")
    try:
        output = []
        def should_remove(package_name):
            return package_name.startswith("%s" % prefix_pkg_remove)

        f = open(debpack_Packages_fname, "r+")
        for stanza in Packages.iter_paragraphs(f):
            # hwpack-linaro* Package is a metadata package that contain reference to the 
            # linux-linaro-omap that was previously present in the hwpack.
            # We need to make sure we dont write the hwpack-linaro related
            # package information into Package, otherwise it would try to download the old
            # kernel package that was present in the hwpack than installing the new one.
            if not (should_remove(stanza["Package"]) or 
                    stanza["Package"].startswith("hwpack-linaro")):
                output.append(stanza)
        output.append(DummyStanza(new_debpack_info))

        f.seek(0,0)
        f.truncate()
        for stanza in output:
            stanza.dump(f)
            f.write("\n")
    finally:
        f.close()


def main():
    # Validate that all the required information is passed on the command line
    args = parser.parse_args()
    if args.hwpack_name == None or args.deb_pack == None or\
       args.prefix_pkg_remove == None:
        parser.print_help()
        parser.error("You must specify both hwpack name "\
                     "and the debian package information\n")
        return 1

    set_logging_param(args)

    old_debpack_info = None
    old_hwpack = args.hwpack_name
    new_deb_file_to_copy = args.deb_pack
    prefix_pkg_remove = args.prefix_pkg_remove
    status = 0

    try:

        # Get the new hardware pack name
        hwpack_name = get_hwpack_name(old_hwpack)
        if hwpack_name == None:
            logger.error("Did not get a valid hwpack name, exiting")
            return status

        # untar the hardware pack and extract all the files in it
        tar = tarfile.open(old_hwpack, "r:gz")
        tempdir = tempfile.mkdtemp()
        tar.extractall(tempdir)

        # Search if a similar package with the same name exists, if yes then
        # replace it. IF the old and new debian have the same name then we
        # are still replacing the old one with the new one.
        debpack_dirname = os.path.join(tempdir, 'pkgs/')
        if not os.path.exists(debpack_dirname):
            logger.error("Failed to extract the hwpack: %s ", old_hwpack)
            return status

        new_debpack_info = FetchedPackage.from_deb(new_deb_file_to_copy)

        old_debpack_info = verify_existing_debians(debpack_dirname, prefix_pkg_remove)

        # Copy the new debian file to the pkgs dir,
        shutil.copy2(new_deb_file_to_copy, debpack_dirname)

        modify_manifest_info(tempdir, new_debpack_info, prefix_pkg_remove)

        modify_Packages_info(debpack_dirname, new_debpack_info, prefix_pkg_remove)

        #tar the hardware pack with the new debian file included in it
        tar = tarfile.open( hwpack_name , "w:gz")
        os.chdir(tempdir)
        for file_name in glob.glob('*'):
            tar.add(file_name, recursive=True)
        tar.close()
    except Exception, details:
        logger.error("Error Details: %s", details)
        status = 1

    if status == 0:
        logger.info("The debian package '%s' has been been included in '%s'",
                     new_deb_file_to_copy, hwpack_name)
    else:
        logger.error("Injecting the debian package '%s' failed", new_deb_file_to_copy)

    return status


if __name__ == '__main__':
    sys.exit(main())
