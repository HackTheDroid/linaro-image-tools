#!/bin/bash
# linaro-hwpack-install - Install a Linaro Hardware Pack.

# Copyright 2010 Linaro
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# XXX: wget is not a dependency of ubuntu-minimal

set -e

LOCKFILE="/var/lock/hwpack"
TEMP_DIR="/var/tmp/hwpack"
HWPACK_DIR="${TEMP_DIR}/unpacked"
HWPACK_TARBALL="${TEMP_DIR}/hwpack.tgz"
HWPACK_PKGS_SOURCE=/etc/apt/sources.list.d/hwpack-pkgs.list

if [ $# -eq 0 ]; then
  echo "Usage: `basename $0` HWPACK_URL"
  exit 1
fi

die() {
  echo "$@"
  exit 1
}

# Try to acquire fd #9 (i.e. /var/lock/hwpack) for 2 seconds.
# Using 9 as the file descriptor because of https://launchpad.net/bugs/249620
exec 9>$LOCKFILE
flock -w2 9 || die "Could not acquire lock: $LOCKFILE"

cleanup() {
  # Ensure our temp dir and apt sources are removed.
  echo -n "Cleaning up ..."
  rm -rf $TEMP_DIR
  sudo rm -f $HWPACK_PKGS_SOURCE
  sudo rm -f /etc/apt/sources.list.d/hwpack.*
  sudo apt-get update -qq
  sudo apt-get clean -qq
  echo "Done"
}

# From now on we'll be making changes to the system, so we need to clean
# things up when the script exits.
trap cleanup EXIT

# This creates all the directories we need.
mkdir -p "$HWPACK_DIR"

# Download and unpack the hwpack tarball.
echo -n "Downloading hardware pack from $1..."
wget -q -O "$HWPACK_TARBALL" "$1"
echo "Done"
echo -n "Unpacking hardware pack ..."
tar zxf "$HWPACK_TARBALL" -C "$HWPACK_DIR"
echo "Done"

# Check the architecture of the hwpack matches that of the host system.
HWPACK_ARCH=`grep ARCHITECTURE "${HWPACK_DIR}/metadata" | cut -d "=" -f2`
[ "$HWPACK_ARCH" == `dpkg --print-architecture` ] || \
  die "Hardware pack architecture ($HWPACK_ARCH) does not match the host's architecture"

# Install the apt sources that contain the packages we need.
for file in "${HWPACK_DIR}"/sources.list.d/*; do
  filename=`basename $file`
  sudo cp $file /etc/apt/sources.list.d/hwpack.$filename
  # TODO:
  #  * Skip any files that contain lines that are already present in the apt
  #  configuration outside of the "hwpack." prefixed files.
  #  * If there is an existing "/var/lib/hwpack/sources" it compares the list
  #  of filenames it just created with those listed in that file, and removes
  #  any in the file that it didn't just write itself.
  #  * It stores the names of the files it created in
  #  "/var/lib/hwpack/sources", overwriting anything already there.
done

# Import the OpenPGP keys for the files installed above.
for file in `ls "${HWPACK_DIR}"/sources.list.d.gpg/`; do
  sudo apt-key add $file
done

# Add one extra apt source for the packages included in the hwpack.
sudo sh -c "echo deb file:${HWPACK_DIR}/pkgs ./ > $HWPACK_PKGS_SOURCE"

sudo apt-get update -qq

echo -n "Installing packages ..."
packages=`sed 's/ /=/' "${HWPACK_DIR}"/manifest`
sudo apt-get install $packages
# TODO:
#     * if package has version and --install-latest is not specified then add PACKAGE=VERSION to command line
#     * else add PACKAGE to the command line
#     * If there is an existing "/var/lib/hwpack/packages" it compares the list of packages it just installed with those listed in that file, and removes any in the file that it didn't just install itself.
#       * XXX: how to safely remove the packages?
#     * Then write the list of packages that it installed to "/var/lib/hwpack/packages", overwriting any that were there already.
echo "Done"

# TODO:
#   * finally remove all apt caches etc. if the --release parameter is specified
#     * What in particular should be removed?
